#!/bin/sh
VERSION=0.1.6
NAME="rp (run-profile)"

set -e

# ----------------------------------------------------------------------
# dev_ops run_profile tool 'rp', (c) 2014, Mikkel Fahnøe Jørgensen,
# mikkel@dvide.com, license: MIT
# ----------------------------------------------------------------------

# Possible extension:
#
# add DEVOPS_PROFILE_LOCK and DEVOPS_SYSTEM_LOCK
# If either value is set, they must both be set and match.
#
# Examples could be:
# DEVOPS_PROFILE_LOCK=megacorp-aws-eu-west-2014-09-alpha-0.0.4
# DEVOPS_PROFILE_LOCK=98bdb4c8f5e014dfca6b1640c894f9c3
#
# it cannot be read from the environment or from the command line.  It
# is not secret, or safe, it mere avoids unintentional mismatches.
#
# It can also be used to quickly disable all profiles centrally until
# further action can be taken by updating the DEVOPS_SYSTEM_LOCK.
#
# Semantic versioning with softer match rules may also be worth
# considering, but probably overkill.
#
# --force can be used to override.

appname=$(basename $0)

function usage {
cat <<EOF
Usage: ${appname} [-options] [<command> [<args> ...]]
     : ${appname} --help | -h

    <command> : system command or shell script, defaults to 'env'
    <args>    : arbitrary arguments to <command>

Runs command with a given environment profile.

Options:

    -p | --profile[=]<profile>
            override DEVOPS_PROFILE

    -s | --system[=]<system>
            override DEVOPS_SYSTEM

    -e | --export
            expands and exports .env files with '[<basename>]' as separator

    -n | --no-expand
            disables template expansion
            implies -e

    -x | --no-headers
            disables section headers in export
            implies -e
        
    -o | --output[=]<file> 
            implies -e but writes to specified file

    -f | --force
            ignore missing directory errors

    -t | --trace
            debug information
            
    -v | --version
            version of this tool

    -h | --help
            brief help message

    -g | --global
            exclude {{ system_home }}/bin:{{ system_root }}/bin from executable path

    --init
            creates .devops.conf and systems/common_system.env files

EOF
}

function brief {
usage
cat <<EOF

Reads key/value pairs from the following files (default paths):

    ~/.devops/profiles/<profile>/profile.env
    ./systems/<system>/system.env

The .env format is roughly:

    # comment - no leading spaces are allowed.
    # a value is everything after '=' until end of line
    # with trailing spaces stripped.
    MY_SETTING=my value
    Valid=no
    MY_FILE={{ profile_home }}/myfile.conf

The values are exported into the environment of the command being
called. Note that the following will not work:

    $ rp echo "\$MY_SETTING"

but the following will:

    $ rp eval "echo \$MY_SETTING"
    my value
or
    $ rp sh
    echo "\$MY_SETTING"
    exit

The profile environment does not exists before or after the call.

<system> and <profile> are optional, and may also be given in the
environment, but command line arguments will override these.

Both files are read in that order when present, but none are required.
Without .env files, certain paths are still exposed to the environment
which may be used to locate other configuration files.

The default paths without the above settings are:

    {{ profile_root }}/profiles/profile.env
    {{ project_home }}/systems/system.env

Where {{ profile_root }} defaults to '~/.devops', and {{ project_home }}
is the current directory unless

    .devops.conf

is found in a parent directory, which then becomes the project home.
Currently the file is not read, it is just an anchor. It can be created
with 'rp --init' and normally .devops.conf should be added to source
control.

Profiles SHOULD NOT be added to source control, they hold
personal secrets and are kept separate for that reason.

When a command is run, the global system PATH environment is used as
usual, but PATH is by default extended with

    {{ system_home }}/bin:{{ system_root }}/bin

for both the current command, and any command executed indirectly.
This is useful for running various scripts as part of the tooling -
especially because small wrapper scripts are often needed to take
advantage of the environment variables made available. The system
specific bin directory is useful for things like:

    rp publish

Which might only make sense for a web site or blog system.

The entire environment can be frozen in a sub-shell like:

    rp bash

or, for example:

    rp --profile joe/aws1 bash

You probably want to update your prompt, for example in .bashrc for OS X:

    PS1='\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\\$ '
    if [ -n "\$DEVOPS_PROFILE" ]; then
        # set prompt for subshell
        PS1="\e[0;32m\][\$DEVOPS_PROFILE]\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\\$ "
    fi

All secrets are exposed in the subshell, but also, all scripts can be run
at native speeds in the current path, even when outside the project directory.
This trades convenience for safety and potential confusion.

EOF
# NOTE: in the prompt above, '$' has been escaped with '\$' remove the '\' in
# the .bashrc if reading this in the source file.
}

function help {
    echo "$(brief)\n\nAlso see README for extensive documentation."
    exit 0
}

function fail {
    usage >&2 
    echo $1 >&2
    exit 1; 
}


# ----------------------------------------------------------------------
# opt-in core option parser library, (c) 2014, Mikkel Fahnøe Jørgensen
# Version: v0.1.1, License: MIT
# ----------------------------------------------------------------------
function _opt_dbg { [ $_opt_dbg_enabled -ne 0 ] && echo "debug: $@"; return 0; }
function _opt_esc { _opt_ping="'\''"; _opt_qv="${1//\'/$_opt_ping}"; _opt_qv="'${_opt_qv}'"; }
function _opt_push { _opt_dbg "pushing: $@";
    for _opt_i; do _opt_esc "$_opt_i"; _opt_args="${_opt_args}${_opt_qv} "; done; } 
function _opt_value { _opt_dbg _value_; _opt_push "$1"; unset _opt_expect; unset _opt_missing; }
function opt_user_fail { reason="$1"; name="$2"; msg="$3";
    echo >&2 "$msg $name"; exit 1; }
function opt_missing { _opt_dbg _missing_;
    _opt_value "${1:-${_opt_missing:-$_opt_tmissing}}";
    [ $_opt_silent -eq 0 ] && \
        opt_user_fail "missing-value" "$_opt_expect" "error: option expected a value: "; }
function _opt_put {
    if [ -n "$_opt_expect" ]; then [ $_opt_eager -ne 0 ] && _opt_dbg "_eager_" && \
        _opt_value "$_opt_token" && return 0;
        _opt_dbg "_strict_default_"; opt_missing; fi;
    _opt_dbg "_type_: $1"; _opt_push "$2"; [ -n "$3" ] && _opt_value "$3"; }
function opt_invalid { _opt_brk=1;
    _opt_put "i: invalid option" "${1:-$_opt_tinvalid}" "$_opt_token";
    [ $_opt_silent -eq 0 ] &&  \
        opt_user_fail "invalid-option" "$_opt_token" "error: invalid option: "; }
function opt_kv { _opt_put "kv: key value" "$1" "${_opt_token#*=}"; }
function opt_ev { _opt_missing="$2"; _opt_put "ev: expect value option" "$1";
    _opt_expect="$_opt_token"; } 
function opt_v { _opt_put "v: value option"  "$1" "${_opt_token:2}"; }
function opt_vg { _opt_put "vg: value given option"  "$1" "$2"; }
function opt_vs { _opt_put "vs: value suffix" "$1" "${_opt_token#$2}"; }
function opt_f { _opt_put "f: flag option" "$1"; }
function opt_break { [ -n "$_opt_expect" ] && _opt_dbg _break_expecting_ && opt_missing;
    [ $_opt_brk -eq 0 ] && [ -n "$1" ] && _opt_dbg _break_ && _opt_push "$1"; _opt_brk=1; }
function opt_nonopt { opt_break "$1"; _opt_dbg _nonopt_; _opt_push "$_opt_token"; }
function opt_pos { _opt_dbg _pos_; [ -n "$_opt_expect" ] && _opt_value "$_opt_token" \
    || opt_nonopt "$1"; }
function opt_resume { _opt_brk=0; _opt_dbg _resume_; }
function opt_next { _opt_token="$1"; OPT_TOKEN="$1";
    _opt_dbg "args so far: $_opt_args"; _opt_dbg "next token: $1";
    if [ $_opt_brk -eq 0 ]; then return 0; else opt_pos; return 1; fi; }
function opt_get { _opt_tail="$1"; if [ "${1:0:1}" == "-" ] && [ ! $_opt_brk -ne 0 ] &&
    ( [ -z "$_opt_expect" ] || [ $_opt_eager -eq 0 ] ); then 
    while [ "$2" != "${2/${_opt_tail:1:1}/}" ]; do
        _opt_dbg "_combine_: flag '$_opt_tail' in '$2'"
        opt_next "${_opt_tail:0:2}"; opt_f "$OPT_TOKEN"; _opt_tail="-${_opt_tail:2}";
        [ "$_opt_tail" == '-' ] && return 1; done; fi; opt_next "$_opt_tail"; }
function opt_debug { echo >&2 "opt: token='$_opt_token'"; }
function opt_init { _opt_args=""; _opt_token=""; _opt_qv=""; 
    _opt_brk=0; unset _opt_expect; unset OPT_ARGS; _opt_silent=0; _opt_eager=1;
    _opt_tinvalid='?'; _opt_tmissing=':'; _opt_dbg_enabled=0;
    for _opt_i; do _opt_dbg _opt_init_ arg "$_opt_i"
        case "$_opt_i" in silent) _opt_silent=1;; eager) _opt_eager=1;;
    strict) _opt_eager=0;; noisy) _opt_silent=0;; debug) _opt_dbg_enabled=1;;
    invalid=*) _opt_tinvalid=${_opt_i#*=};; missing=*) _opt_tmissing=${_opt_i#*=};;
    *) echo >&2 "error: opt-in opt_init: invalid argument: $_opt_i";; esac; done; }
function opt_final { [ -z "$_opt_expect" ] || opt_missing;
    OPT_ARGS="${_opt_args%?}"; OPT_IN="eval set -- $OPT_ARGS"; _opt_dbg "OPT_ARGS: $OPT_ARGS"
    unset _opt_args; unset _opt_token; unset _opt_qv; unset _opt_silent;unset _opt_debug_enabled;
    unset _opt_eager; unset _opt_tmissing; unset _opt_tinvaild; unset _opt_ping; unset _opt_tail;
    unset opt_i; unset _opt_brk; unset _opt_expect; unset _opt_missing; unset OPT_TOKEN; }
# ------------------------- end opt-in library -------------------------

# ----------------------------------------------------------------------
# opt-in extension library, (c) 2014, Mikkel Fahnøe Jørgensen
# License: MIT
# ----------------------------------------------------------------------
function opt_match_cv {
    # Order is important!
    case "$OPT_TOKEN" in
        "$2") opt_ev "$1" "$3" ;;
        "$1") opt_ev "$1" "$3" ;;
        "$2"=*) opt_kv $1 ;;

        # comment out the following line for getopt compatibility
        "$1"=*) opt_kv $1 ;;
        
        "$1"*) opt_vs "$1" "$1" ;;
            *) return 1 ;;
    esac
    return 0;
}
function opt_match_cf {
    case "$OPT_TOKEN" in
        "$1") opt_f "$1" ;;
        "$2") opt_f "$1" ;;
        *) return 1 ;;
    esac
    return 0;
}
function opt_match_nonoptions {
    case "$OPT_TOKEN" in
        --) opt_break -- ;;
        -*) opt_invalid ;;
        *) opt_pos -- ;;
    esac
    return 0;
}
function opt_user_fail {
    reason=$1; name=$2; msg=$3;
    fail "$msg $name"
}
# -------------------- end opt-in extension library --------------------

function opt_match_lf {
    case "$OPT_TOKEN" in
        "$1") opt_f "$1" ;;
        *) return 1 ;;
    esac
    return 0;
}

opt_init #debug silent
for arg
do
    if opt_get "$arg" "fenvxdht"; then 
        opt_match_cf -f --force      ||
        opt_match_cf -e --export     ||
        opt_match_cf -n --no-headers ||
        opt_match_cf -v --version    ||
        opt_match_cf -t --trace      ||
        opt_match_cf -h --help       ||
        opt_match_cf -x --no-expand  ||
        opt_match_cf -g --global     ||
        opt_match_lf --init          ||

        opt_match_cv -s --system     ||
        opt_match_cv -p --profile    ||
        opt_match_cv -o --output     ||
        opt_match_nonoptions
    fi
done
opt_final


# put the translated arguments back on the input
$OPT_IN


# Now do a program specific parse.
# The follwoing will work without the former, but only
# for simple short options like:
#
#    $ rp -h -o <filename> -e -s <system> -p <profiile>
#
# We still keep it tight and keep application logic out, except
# handling implied options. We allow for empty value detection.


# Reset all variables that might be set

unset e_arg
unset f_arg
unset n_arg
unset t_arg
unset x_arg
unset o_arg
unset p_arg
unset s_arg
unset ip_arg
unset exbin_arg

o_val=""
p_val=""
s_val=""

# STDIN (-)
unset stdin_arg
# (--) split operator
unset split_arg

function check_arg {
    if [ $1 -eq 1 ] && ( [ "$2" == ":" ] || [ -z "$2" ] ) ; then
        echo $3;
        echo "aborting."
        exit 1;
    fi
}

function show_version {
    echo "$NAME version $VERSION";
    exit 0;
}

unset OP_TYPE;
unset OP_SRC;
function set_type {
    if [ -z "$OP_TYPE" ]; then
        OP_TYPE=$1
        OP_SRC=$2
    else
        if [ "$OP_TYPE" != $1 ]; then
            fail "flag $OP_SRC incompatible with '$2', aborting";
        fi  
    fi
}

while [ $# -gt 0 ]
do
    case $1 in
        --init) ip_arg=1; set_type init $1 ;;
        -g)  exbin_arg=1; set_type 'run' $1 ;;
        -e)  e_arg=1; set_type 'export' $1 ;;
        -f)  f_arg=1;;
        -h)  help;;
        -n)  n_arg=1; e_arg=1; set_type 'export' $1 ;;
        -t)  t_arg=1;;
        -v)  show_version;;
        -x)  x_arg=1; e_arg=1 set_type 'export' $1 ;;
        -o)  o_arg=1; o_val=$2; set_type 'export' $1; shift;;
        -p)  p_arg=1; p_val=$2; set_type run $1; shift;;
        -s)  s_arg=1; s_val=$2; set_type run $1; shift;;
        --)  shift; break;;
        ?)   echo "invalid option: $2"; shift; break;;
        *) fail "internal: unexpected option or command";;
    esac
    shift
done

# Now the options are fully parsed and the input
# arguments that remain will start with $1.
# cmd_arg will have been set if we got any
# and split_arg will have been set if -- was used.

# Finally pass on the values to application logic.


DEVOPS_EXCLUDE_PROJECT_BIN=$exbin_arg
DEVOPS_INIT_PROJECT=$ip_arg

# if env var is set, or command line arg is given
# then override value in .env files
OVERRIDE_DEVOPS_PROFILE=${p_val:-$DEVOPS_PROFILE}
OVERRIDE_DEVOPS_SYSTEM=${s_val:-$DEVOPS_SYSTEM}

DEVOPS_DEBUG=$t_arg
DEVOPS_EXPORT=$e_arg
DEVOPS_OUTPUT=$o_val
DEVOPS_NOEXPAND=$n_arg
DEVOPS_NOHEADERS=$x_arg
DEVOPS_FORCE=$f_arg



OP_TYPE=${OP_TYPE:-run}

# missing command, or unknown option
if [ -z "$1" ]; then
    OP=env
    CMD=env
else
    if [ "$OP_TYPE" == run ]; then
        CMD=$@
        OP=$1
    else
        fail "command '$1' not allowed for this type of operation: $OP_TYPE"
    fi
fi


if [ "x$(basename $0)" == "xload_user_env" ]; then
    echo >&2 "source this file before executing a command"
    echo >&2 "see also bin/help load_profile"
    exit 1
fi

function trace
{
    if [ $DEVOPS_DEBUG ]; then
        echo >&2 "trace: $@"
    fi
}

trace "loading profile"

function raw_content
{
    cat $1 | sed '/^\s*$/d'| grep -v ^#
}

function reset_profile_args
{
    PROFILE_ROOT_ARG="{{ profile_root }}"
    PROFILE_HOME_ARG="{{ profile_home }}"
    PROFILE_ARG="{{ profile }}"
}

function reset_system_args
{
    SYSTEM_ROOT_ARG="{{ system_root }}"
    SYSTEM_HOME_ARG="{{ system_home }}"
    SYSTEM_ARG="{{ system }}"
}

# http://unix.stackexchange.com/a/129063
# escaped_rhs=$(printf '%s\n' "$rhs" | sed 's:[\/&]:\\&:g;$!s/$/\\/')

function expanded_content
{
    _prj=$(printf '%s\n' "$PROJECT_HOME_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _pr=$(printf '%s\n' "$PROFILE_ROOT_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _ph=$(printf '%s\n' "$PROFILE_HOME_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _p=$(printf '%s\n' "$PROFILE_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _sr=$(printf '%s\n' "$SYSTEM_ROOT_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _sh=$(printf '%s\n' "$SYSTEM_HOME_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _s=$(printf '%s\n' "$SYSTEM_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    cat $1 \
     | sed "s/{{[[:blank:]]*project_home[[:blank:]]*}}/${_prj}/"  \
     | sed "s/{{[[:blank:]]*profile_root[[:blank:]]*}}/${_pr}/"  \
     | sed "s/{{[[:blank:]]*profile_home[[:blank:]]*}}/${_ph}/"  \
     | sed "s/{{[[:blank:]]*profile[[:blank:]]*}}/${_p}/"  \
     | sed "s/{{[[:blank:]]*system_root[[:blank:]]*}}/${_sr}/"  \
     | sed "s/{{[[:blank:]]*system_home[[:blank:]]*}}/${_sh}/"  \
     | sed "s/{{[[:blank:]]*system[[:blank:]]*}}/${_s}/"  \
     | sed '/^[[:blank:]]*$/d' \
     | sed '/^[[:blank:]]*#.*/d' \
     | sed 's/[[:blank:]]*$//'
}

function content
{
    if [ $DEVOPS_NOEXPAND ]; then
        raw_content $1
    else
        expanded_content $1
    fi
}

function dump
{
    if [ $DEVOPS_EXPORT ]; then
        if [ ! $DEVOPS_NOHEADERS ]; then
            echo "[$(basename $1)]"
            content $1
            echo ""
        else
            content $1
        fi
    fi
}

function dump_meta
{
    if [ $DEVOPS_EXPORT ]; then
        if [ ! $DEVOPS_NOHEADERS ]; then
            echo "[meta]"
        fi
        if [ $DEVOPS_NOEXPAND ]; then
            echo "DEVOPS_PROFILE_ROOT={{ profile_root }}"
            echo "DEVOPS_PROFILE_HOME={{ profile_home }}"
        else
            echo "DEVOPS_PROFILE_ROOT=${DEVOPS_PROFILE_ROOT}"
            echo "DEVOPS_PROFILE_HOME=${DEVOPS_PROFILE_HOME}"
        fi
        echo "DEVOPS_PROFILE=${DEVOPS_PROFILE}"
        if [ $DEVOPS_NOEXPAND ]; then
            echo "DEVOPS_SYSTEM_ROOT={{ system_root }}"
            echo "DEVOPS_SYSTEM_HOME={{ system_home }}"
        else
            echo "DEVOPS_SYSTEM_ROOT=${DEVOPS_SYSTEM_ROOT}"
            echo "DEVOPS_SYSTEM_HOME=${DEVOPS_SYSTEM_HOME}"
        fi
        echo "DEVOPS_SYSTEM=${DEVOPS_SYSTEM}"
    fi
}

function process
{
    if [ -e "$1" ]; then
        trace "processing: $1"
        set -e
        if [ -n "$DEVOPS_OUTPUT" ]; then
            dump $1 > $DEVOPS_OUTPUT
        else
            dump $1
        fi

        # We need to find DEVOPS_PROFILE or DEVOPS_SYSTEM, even if we only export
        # the following xargs solution is elegant, but breaks on spaces, even quoted.
        # export  $(expanded_content $1 | xargs )
        # other solutions break because export must not be in a subshell
        # the following works ... sigh
        old_IFS=$IFS; IFS=$'\n'

        for line in $(expanded_content $1); do export "$line"; done 
        IFS=$old_IFS
        [ -z "$DEVOPS_PROFILE_HOME" ] || echo >&2 "warning: DEVOPS_PROFILE_HOME canot be set in $(basename $1)\n- it is a computed value"
        [ -z "$DEVOPS_SYSTEM_HOME" ] || echo >&2 "warning: DEVOPS_SYSTEM_HOME can never set in $(basename $1)\n- it is a computed value"
    else
        trace "skipping: $1"
    fi
}

# for now we just use .devops.conf as an anchor without
# reading it, and assume systems root is relative to
# that location if found, or current path otherwise.
function load_project_config
{
    unset PROJECT_CONFIG
    PROJECT_HOME=$(pwd);
    DEFAULT_SYSTEM_ROOT="$(pwd)/systems";
    DEFAULT_PROFILE_ROOT="${HOME}/.devops/profiles" 
    SEARCH_PATH=$(pwd)
    trace "searching current and parent dirs for devops.conf"
    while [ -n "$SEARCH_PATH" ]; do
        if [ -e "${SEARCH_PATH}/.devops.conf" ]; then
            PROJECT_CONFIG="$SEARCH_PATH/.devops.conf"
            PROJECT_HOME="$SEARCH_PATH"
            DEFAULT_SYSTEM_ROOT="${PROJECT_HOME}/systems"
            trace "project home found: ${PROJECT_HOME}"
            return;
        fi; 
        if [ "$SEARCH_PATH" == "/" ]; then break; fi
        SEARCH_PATH=$(dirname "$SEARCH_PATH");
    done
    trace "project home not found, using current directory"
}

function check
{
    option="$1=$2"
    trace $option
    if [ ! -d $2 ]; then
        echo >&2 "error: expected a directory: $2"
        if [ ! $DEVOPS_FORCE ]; then
            echo >&2 "... aborting"
            exit 1
        fi
        trace "force flag overrides error, continuing"
    fi
}


# In general values are set by the user in the environment,
# but all values can be set in a subshell of the profiled
# environment. In this case the settings in .env files
# will not be active. While an accidental implication,
# it also seems the best thing to do.


load_project_config

if [ $DEVOPS_INIT_PROJECT ]; then
    if [ -z "$PROJECT_CONFIG" ]; then
        echo "creating project"
        mkdir -p systems || fail "could not create systems directory"
        trace "creating systems directory if it doesn't exist"
        trace "creating .devops.conf file to mark project location"
        touch .devops.conf
        if [ ! -e systems/common_system.env ]; then
            trace "creating systems/common_system.env"
            touch systems/common_system.env
        else
            trace "systems/common/system.env already exists, skipping"
        fi
    else
        echo "skipping since '.devops.conf' already exists at:"
        echo "  $PROJECT_CONFIG"
        exit 1;
    fi
    exit 0;
fi

# Pick up from environment unless command line already overrides.
OVERRIDE_DEVOPS_PROFILE_ROOT=${OVERRIDE_DEVOPS_PROFILE_ROOT:-${DEVOPS_PROFILE_ROOT:-""}}
OVERRIDE_DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE:-${DEVOPS_PROFILE:-""}}
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM:-""}}
OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-${DEVOPS_SYSTEM_ROOT:-""}}

unset DEVOPS_PROFILE_ROOT
unset DEVOPS_PROFILE_HOME
unset DEVOPS_PROFILE
unset DEVOPS_SYSTEM_ROOT
unset DEVOPS_SYSTEM_HOME
unset DEVOPS_SYSTEM

reset_profile_args
reset_system_args

# Project home is always defined, either current directory
# or the ancestor with a '.devops.conf' filei, and cannot
# be set. May be used to set system root as relative path.
PROJECT_HOME_ARG="$PROJECT_HOME"


OVERRIDE_DEVOPS_PROFILE_ROOT=${OVERRIDE_DEVOPS_PROFILE_ROOT:-${DEFAULT_PROFILE_ROOT}}
check DEVOPS_PROFILE_ROOT ${OVERRIDE_DEVOPS_PROFILE_ROOT}
PROFILE_ROOT_ARG=${OVERRIDE_DEVOPS_PROFILE_ROOT}
process "${OVERRIDE_DEVOPS_PROFILE_ROOT}/common_profile.env"

[ -z "$DEVOPS_SYSTEM" ] || echo >&2 "warning: DEVOPS_SYSTEM cannot be set in 'common_profile.env'"
OVERRIDE_DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE:-${DEVOPS_PROFILE}}
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM}}
OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-${DEVOPS_SYSTEM_ROOT}}
unset DEVOPS_PROFILE
unset DEVOPS_SYSTEM
unset DEVOPS_SYSTEM_ROOT

trace "DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE}"
sep=""
[ -z "$OVERRIDE_DEVOPS_PROFILE" ] || sep="/"
OVERRIDE_DEVOPS_PROFILE_HOME=${OVERRIDE_DEVOPS_PROFILE_ROOT}${sep}${OVERRIDE_DEVOPS_PROFILE}
check DEVOPS_PROFILE_HOME ${OVERRIDE_DEVOPS_PROFILE_HOME}
PROFILE_HOME_ARG=${OVERRIDE_DEVOPS_PROFILE_HOME}
PROFILE_ARG=${OVERRIDE_DEVOPS_PROFILE}
process "${OVERRIDE_DEVOPS_PROFILE_HOME}/profile.env"

[ -z "$DEVOPS_PROFILE_ROOT" ] || echo >&2 "warning: DEVOPS_PROFILE_ROOT cannot be set in 'profile.env'"
[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'profile.env'"
OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-${DEVOPS_SYSTEM_ROOT}}
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM}}
unset DEVOPS_SYSTEM_ROOT
unset DEVOPS_SYSTEM

# profile args are decoupled from system configuration directly
reset_profile_args

OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-${DEFAULT_SYSTEM_ROOT}}
check DEVOPS_SYSTEM_ROOT ${OVERRIDE_DEVOPS_SYSTEM_ROOT}
SYSTEM_ROOT_ARG=${OVERRIDE_DEVOPS_SYSTEM_ROOT}
process ${OVERRIDE_DEVOPS_SYSTEM_ROOT}/common_system.env


[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'common_system.env'"
[ -z "$DEVOPS_PROFILE_ROOT" ] || echo >&2 "warning: DEVOPS_PROFILE_ROOT cannot be set in 'common_system.env'"
[ -z "$DEVOPS_SYSTEM_ROOT" ] || echo >&2 "warning: DEVOPS_SYSTEM_ROOT cannot be set in 'common_system.env'"
[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'common_system.env'"

# Allow system to be selected in common_profile.env.
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM}}
unset DEVOPS_SYSTEM

sep=""
[ -z "$OVERRIDE_DEVOPS_SYSTEM" ] || sep="/"
trace "DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE}"
OVERRIDE_DEVOPS_SYSTEM_HOME=${OVERRIDE_DEVOPS_SYSTEM_ROOT}${sep}${OVERRIDE_DEVOPS_SYSTEM}
check DEVOPS_SYSTEM_HOME ${OVERRIDE_DEVOPS_SYSTEM_HOME}
SYSTEM_HOME_ARG=${OVERRIDE_DEVOPS_SYSTEM_HOME}
SYSTEM_ARG=${OVERRIDE_DEVOPS_SYSTEM}
process ${OVERRIDE_DEVOPS_SYSTEM_HOME}/system.env

[ -z "$DEVOPS_PROFILE_ROOT" ] || echo >&2 "warning: DEVOPS_PROFILE_ROOT cannot be set in 'system.env'"
[ -z "$DEVOPS_SYSTEM_ROOT" ] || echo >&2 "warning: DEVOPS_SYSTEM_ROOT cannot be set in 'system.env'"
[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'system.env'"
[ -z "$DEVOPS_SYSTEM" ] || echo >&2 "warning: DEVOPS_SYSTEM cannot be set in 'system.env'"


export DEVOPS_PROFILE_ROOT=${OVERRIDE_DEVOPS_PROFILE_ROOT}
export DEVOPS_PROFILE_HOME=${OVERRIDE_DEVOPS_PROFILE_HOME}
export DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE}
export DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT}
export DEVOPS_SYSTEM_HOME=${OVERRIDE_DEVOPS_SYSTEM_HOME}
export DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM}
export DEVOPS_PROJECT_HOME=${PROJECT_HOME}

if [ -n "$DEVOPS_OUTPUT" ]; then
    dump_meta > $DEVOPS_OUTPUT
else
    dump_meta
fi

function check_cmd {
    # this method is Posix compliant.
    command -v $1 >/dev/null 2>&1
}

if [ "$OP_TYPE" == "run" ]; then
    if [ $DEVOPS_EXCLUDE_PROJECT_BIN ]; then
        trace "ignoring project bin path due to exclusion flag"
    else
        # Allow specific systems to provide scripts and to override project defaults.
        # We do no support system root bin path, that would get a bit excessive.
        if [ "$DEVOPS_SYSTEM_ROOT" != "$DEVOPS_SYSTEM_HOME" ] &&
            [ -d "${DEVOPS_SYSTEM_ROOT}/bin" ]; then
            trace "extending PATH variable with: ${DEVOPS_SYSTEM_ROOT}/bin"
            export PATH="$DEVOPS_SYSTEM_ROOT/bin:$PATH"
        else
            trace "no {{ system_root }}/bin found, skipping path extension"
        fi
        if [ -d "${DEVOPS_SYSTEM_HOME}/bin" ]; then
            trace "extending PATH variable with: ${DEVOPS_SYSTEM_HOME}/bin"
            export PATH="$DEVOPS_SYSTEM_HOME/bin:$PATH"
        else
            trace "no {{ system_home }}/bin found, skipping path extension"
        fi
    fi
    check_cmd "$OP" || fail "error: command not found: $OP"
    trace "executing: $CMD"
    $CMD
fi

