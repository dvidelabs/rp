#!/bin/sh

set -e

if [ "x$(basename $0)" == "xload_user_env" ]; then
    echo >&2 "source this file before executing a command"
    echo >&2 "see also bin/help load_profile"
    exit 1
fi


function trace
{
    if [ $DEVOPS_DEBUG ]; then
        echo >&2 "trace: $@"
    fi
}

trace "loading profile"

function raw_content
{
    cat $1 | sed '/^\s*$/d'| grep -v ^#
}

function reset_profile_args
{
    PROFILE_ROOT_ARG="{{ profile_root }}"
    PROFILE_HOME_ARG="{{ profile_home }}"
    PROFILE_ARG="{{ profile }}"
}

function reset_system_args
{
    SYSTEM_ROOT_ARG="{{ system_root }}"
    SYSTEM_HOME_ARG="{{ system_home }}"
    SYSTEM_ARG="{{ system }}"
}

# http://unix.stackexchange.com/a/129063
# escaped_rhs=$(printf '%s\n' "$rhs" | sed 's:[\/&]:\\&:g;$!s/$/\\/')

function expanded_content
{

    _pr=$(printf '%s\n' "$PROFILE_ROOT_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _ph=$(printf '%s\n' "$PROFILE_HOME_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _p=$(printf '%s\n' "$PROFILE_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _sr=$(printf '%s\n' "$SYSTEM_ROOT_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _sh=$(printf '%s\n' "$SYSTEM_HOME_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    _s=$(printf '%s\n' "$SYSTEM_ARG" | sed 's:[\/&]:\\&:g;$!s/$/\\/')
    cat $1 \
     | sed "s/{{[[:blank:]]*profile_root[[:blank:]]*}}/${_pr}/"  \
     | sed "s/{{[[:blank:]]*profile_home[[:blank:]]*}}/${_ph}/"  \
     | sed "s/{{[[:blank:]]*profile[[:blank:]]*}}/${_p}/"  \
     | sed "s/{{[[:blank:]]*system_root[[:blank:]]*}}/${_sr}/"  \
     | sed "s/{{[[:blank:]]*system_home[[:blank:]]*}}/${_sh}/"  \
     | sed "s/{{[[:blank:]]*system[[:blank:]]*}}/${_s}/"  \
     | sed '/^[[:blank:]]*$/d' \
     | sed '/^[[:blank:]]*#.*/d' \
     | sed 's/[ \t]*$//'
}  

function content
{
    if [ $DEVOPS_NOEXPAND ]; then
        raw_content $1
    else
        expanded_content $1
    fi
}

function dump
{
    if [ $DEVOPS_EXPORT ]; then
        if [ ! $DEVOPS_NOHEADERS ]; then
            echo "[$(basename $1)]"
            content $1
            echo ""
        else
            content $1
        fi
    fi
}

function dump_meta
{
    if [ $DEVOPS_EXPORT ]; then
        if [ ! $DEVOPS_NOHEADERS ]; then
            echo "[meta]"
        fi
        if [ $DEVOPS_NOEXPAND ]; then
            echo "DEVOPS_PROFILE_ROOT={{ profile_root }}"
            echo "DEVOPS_PROFILE_HOME={{ profile_home }}"
        else
            echo "DEVOPS_PROFILE_ROOT=${DEVOPS_PROFILE_ROOT}"
            echo "DEVOPS_PROFILE_HOME=${DEVOPS_PROFILE_HOME}"
        fi
        echo "DEVOPS_PROFILE=${DEVOPS_PROFILE}"
        if [ $DEVOPS_NOEXPAND ]; then
            echo "DEVOPS_SYSTEM_ROOT={{ system_root }}"
            echo "DEVOPS_SYSTEM_HOME={{ system_home }}"
        else
            echo "DEVOPS_SYSTEM_ROOT=${DEVOPS_SYSTEM_ROOT}"
            echo "DEVOPS_SYSTEM_HOME=${DEVOPS_SYSTEM_HOME}"
        fi
        echo "DEVOPS_SYSTEM=${DEVOPS_SYSTEM}"
    fi
}

function process
{
    if [ -e "$1" ]; then
        trace "processing: $1"
        set -e
        if [ -n "$DEVOPS_OUTPUT" ]; then
            dump $1 > $DEVOPS_OUTPUT
        else
            dump $1
        fi

        # We need to find DEVOPS_PROFILE or DEVOPS_SYSTEM, even if we only export
        # the following xargs solution is elegant, but breaks on spaces, even quoted.
        # export  $(expanded_content $1 | xargs )
        # other solutions break because export must not be in a subshell
        # the following works ... sigh
        old_IFS=$IFS; IFS=$'\n'

        for line in $(expanded_content $1); do export "$line"; done 
        IFS=$old_IFS
        [ -z "$DEVOPS_PROFILE_HOME" ] || echo >&2 "warning: DEVOPS_PROFILE_HOME canot be set in $(basename $1)\n- it is a computed value"
        [ -z "$DEVOPS_SYSTEM_HOME" ] || echo >&2 "warning: DEVOPS_SYSTEM_HOME can never set in $(basename $1)\n- it is a computed value"
    else
        trace "skipping: $1"
    fi
}

function check
{
    option="$1=$2"
    trace $option
    if [ ! -d $2 ]; then
        echo >&2 "error: expected a directory: $2"
        if [ ! $DEVOPS_FORCE ]; then
            echo >&2 "... aborting"
            exit 1
        fi
        trace "force flag overrides error, continuing"
    fi
}


# In general values are set by the user in the environment,
# but all values can be set in a subshell of the profiled
# environment. In this case the settings in .env files
# will not be active. While an accidental implication,
# it also seems the best thing to do.

# Pick up from environment unless command line already overrides.
OVERRIDE_DEVOPS_PROFILE_ROOT=${OVERRIDE_DEVOPS_PROFILE_ROOT:-${DEVOPS_PROFILE_ROOT:-""}}
OVERRIDE_DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE:-${DEVOPS_PROFILE:-""}}
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM:-""}}
OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-${DEVOPS_SYSTEM_ROOT:-""}}

unset DEVOPS_PROFILE_ROOT
unset DEVOPS_PROFILE_HOME
unset DEVOPS_PROFILE
unset DEVOPS_SYSTEM_ROOT
unset DEVOPS_SYSTEM_HOME
unset DEVOPS_SYSTEM

reset_profile_args
reset_system_args

OVERRIDE_DEVOPS_PROFILE_ROOT=${OVERRIDE_DEVOPS_PROFILE_ROOT:-${HOME}/.devops/profiles}
check DEVOPS_PROFILE_ROOT ${OVERRIDE_DEVOPS_PROFILE_ROOT}
PROFILE_ROOT_ARG=${OVERRIDE_DEVOPS_PROFILE_ROOT}
process "${OVERRIDE_DEVOPS_PROFILE_ROOT}/common_profile.env"

[ -z "$DEVOPS_SYSTEM" ] || echo >&2 "warning: DEVOPS_SYSTEM cannot be set in 'common_profile.env'"
OVERRIDE_DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE:-${DEVOPS_PROFILE}}
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM}}
OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-${DEVOPS_SYSTEM_ROOT}}
unset DEVOPS_PROFILE
unset DEVOPS_SYSTEM
unset DEVOPS_SYSTEM_ROOT

trace "DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE}"
sep=""
[ -z "$OVERRIDE_DEVOPS_PROFILE" ] || sep="/"
OVERRIDE_DEVOPS_PROFILE_HOME=${OVERRIDE_DEVOPS_PROFILE_ROOT}${sep}${OVERRIDE_DEVOPS_PROFILE}
check DEVOPS_PROFILE_HOME ${OVERRIDE_DEVOPS_PROFILE_HOME}
PROFILE_HOME_ARG=${OVERRIDE_DEVOPS_PROFILE_HOME}
PROFILE_ARG=${OVERRIDE_DEVOPS_PROFILE}
process "${OVERRIDE_DEVOPS_PROFILE_HOME}/profile.env"

[ -z "$DEVOPS_PROFILE_ROOT" ] || echo >&2 "warning: DEVOPS_PROFILE_ROOT cannot be set in 'profile.env'"
[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'profile.env'"
OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-${DEVOPS_SYSTEM_ROOT}}
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM}}
unset DEVOPS_SYSTEM_ROOT
unset DEVOPS_SYSTEM

# profile args are decoupled from system configuration directly
reset_profile_args

OVERRIDE_DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT:-$(pwd)/systems}
check DEVOPS_SYSTEM_ROOT ${OVERRIDE_DEVOPS_SYSTEM_ROOT}
SYSTEM_ROOT_ARG=${OVERRIDE_DEVOPS_SYSTEM_ROOT}
process ${OVERRIDE_DEVOPS_SYSTEM_ROOT}/common_system.env


[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'common_system.env'"
[ -z "$DEVOPS_PROFILE_ROOT" ] || echo >&2 "warning: DEVOPS_PROFILE_ROOT cannot be set in 'common_system.env'"
[ -z "$DEVOPS_SYSTEM_ROOT" ] || echo >&2 "warning: DEVOPS_SYSTEM_ROOT cannot be set in 'common_system.env'"
[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'common_system.env'"

# Allow system to be selected in common_profile.env.
OVERRIDE_DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM:-${DEVOPS_SYSTEM}}
unset DEVOPS_SYSTEM

sep=""
[ -z "$OVERRIDE_DEVOPS_SYSTEM" ] || sep="/"
trace "DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE}"
OVERRIDE_DEVOPS_SYSTEM_HOME=${OVERRIDE_DEVOPS_SYSTEM_ROOT}${sep}${OVERRIDE_DEVOPS_SYSTEM}
check DEVOPS_SYSTEM_HOME ${OVERRIDE_DEVOPS_SYSTEM_HOME}
SYSTEM_HOME_ARG=${OVERRIDE_DEVOPS_SYSTEM_HOME}
SYSTEM_ARG=${OVERRIDE_DEVOPS_SYSTEM}
process ${OVERRIDE_DEVOPS_SYSTEM_HOME}/system.env

[ -z "$DEVOPS_PROFILE_ROOT" ] || echo >&2 "warning: DEVOPS_PROFILE_ROOT cannot be set in 'system.env'"
[ -z "$DEVOPS_SYSTEM_ROOT" ] || echo >&2 "warning: DEVOPS_SYSTEM_ROOT cannot be set in 'system.env'"
[ -z "$DEVOPS_PROFILE" ] || echo >&2 "warning: DEVOPS_PROFILE cannot be set in 'system.env'"
[ -z "$DEVOPS_SYSTEM" ] || echo >&2 "warning: DEVOPS_SYSTEM cannot be set in 'system.env'"


export DEVOPS_PROFILE_ROOT=${OVERRIDE_DEVOPS_PROFILE_ROOT}
export DEVOPS_PROFILE_HOME=${OVERRIDE_DEVOPS_PROFILE_HOME}
export DEVOPS_PROFILE=${OVERRIDE_DEVOPS_PROFILE}
export DEVOPS_SYSTEM_ROOT=${OVERRIDE_DEVOPS_SYSTEM_ROOT}
export DEVOPS_SYSTEM_HOME=${OVERRIDE_DEVOPS_SYSTEM_HOME}
export DEVOPS_SYSTEM=${OVERRIDE_DEVOPS_SYSTEM}

if [ -n "$DEVOPS_OUTPUT" ]; then
    dump_meta > $DEVOPS_OUTPUT
else
    dump_meta
fi

